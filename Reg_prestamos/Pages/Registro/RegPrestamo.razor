@page "/Prestamos"
@page "/Prestamos/{PrestamoID:int}"

@inject IToastService toast

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
     <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamo</h3>
        </div>
        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Prestamo Id :</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Prestamo.PrestamoID" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                        <i class="oi oi-magnifying-glass mr-2"/>Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha :</label>
                    <InputDate @bind-Value="Prestamo.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Prestamo.Fecha)" />
                </div>

                @*PersonaId*@
                <div class="form-group">
                    <label>Persona Id:</label>
                    <select id="PersonaSeleccionadaSe" @bind="PersonaSeleccionada" class="form-control" @onfocusout="ObtenerBalance">
                        <option value="0" disabled selected>Seleccione una persona</option>
                        @foreach (var item in ListaPersonas)
                        {
                            <option value="@item.PersonaID">@item.Nombre</option>
                        }
                    </select>
                </div>


                @*Concepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="Prestamo.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => Prestamo.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="Prestamo.Monto" class="form-control" />
                    <ValidationMessage For="@(() => Prestamo.Monto)" />
                </div>


                @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber @bind-Value="Prestamo.Balance" class="form-control" readOnly="true" />
                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                    <i class="oi oi-file mr-2" />Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success">
                    <i class="oi oi-account-login mr-2" style="transform:rotate(90deg)"/>Guardar
                </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <i class="oi oi-trash mr-2"/>Eliminar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code
{ [Parameter]
    public int PrestamoId { get; set; }
    private Prestamos Prestamo = new Prestamos();
    public int PersonaSeleccionada { get; set; }
    List<Persona> ListaPersonas = new List<Persona>();
    public decimal MontoAnterior { get; set; }


    protected override void OnInitialized()
    {
        Nuevo();
    }
    public void Nuevo()
    {
        ListaPersonas = PersonasBLL.GetList(c => true);
        Prestamo = new Prestamos();
        PersonaSeleccionada = 0;
    }
    private void Buscar()
    {
        if (Prestamo.PrestamoID > 0)
        {
            var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoID);
            if (encontrado != null)
            {
                MontoAnterior = encontrado.Monto;
                this.Prestamo = encontrado;
                BuscarPersonaCombo();
                ObtenerBalance();
            }
            else
                toast.ShowWarning("No encontrado");
        }
    }
    private void BuscarPersonaCombo()
    {
        int cantidad = 0;
        foreach (var item in ListaPersonas)
        {
            cantidad++;
            if (item.Nombre == (PersonasBLL.Buscar(Prestamo.PersonasID)).Nombre)
                PersonaSeleccionada = cantidad;
        }

    }
    public void Guardar()
    {
        bool guardo;
        guardo = PrestamosBLL.Guardar(Prestamo, MontoAnterior);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }
    public void Eliminar()
    {
        bool elimino;

        elimino = PrestamosBLL.Eliminar(Prestamo.PrestamoID);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
    private void ObtenerBalance()
    {
        Persona persona = PersonasBLL.Buscar(PersonaSeleccionada);

        if (persona != null)
        {
            Prestamo.PersonasID = persona.PersonaID;
            Prestamo.Balance = persona.Balance;
        }
    }
   }
